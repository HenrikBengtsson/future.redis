% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/redis.R
\name{redis}
\alias{redis}
\title{Redis-based futures}
\usage{
redis(
  expr,
  substitute = TRUE,
  envir = parent.frame(),
  ...,
  queue = "RJOBS",
  config = redis_config(),
  output_queue = NA,
  max_retries = 3L
)
}
\arguments{
\item{expr}{An \R \link[base]{expression}.}

\item{substitute}{If TRUE, argument \code{expr} is
\code{\link[base]{substitute}()}:ed, otherwise not.}

\item{envir}{The \link{environment} from where global objects should be
identified.}

\item{...}{Additional named elements of the future.}

\item{queue}{Redis key name of the task queue (Redis list).}

\item{config}{A \link[redux:redis_config]{redux::redis_config} Redis configuration object.}

\item{output_queue}{(optional) Redis key name of the work output queue
(note: reserved for future use).}

\item{max_retries}{Maximum number of times the future can be re-submitted
to the task queue in the event of failure.}
}
\value{
An object of class \link{RedisFuture}.
}
\description{
Use the Redis key/value database to define partially fault-tolerant,
asynchronous task queues for elastic distributed computing.
}
\examples{
if (redux::redis_available()) {
## The example assumes that a Redis server is running on the local host
## and standard port.

# Register the redis plan on a specified task queue:
plan(redis, queue = "R jobs")

# Start some local R worker processes:
## FIXME: Make Redis queue unique to avoid wreaking havoc
startLocalWorkers(n=2, queue="R jobs", linger=1.0)

# A function that returns a future, note that N uses lexical scoping...
f <- \() future({4 * sum((runif(N) ^ 2 + runif(N) ^ 2) < 1) / N}, seed = TRUE)

# Run a simple sampling approximation of pi in parallel using  M * N points:
N <- 1e6  # samples per worker
M <- 10   # iterations
pi_est <- Reduce(sum, Map(value, replicate(M, f()))) / M
print(pi_est)

# Clean up
## FIXME: Make Redis queue unique to avoid wreaking havoc
removeQ("R jobs")
}

}
\seealso{
\code{\link[redux:redis_config]{redux::redis_config()}}, \code{\link[=worker]{worker()}}, \code{\link[=removeQ]{removeQ()}}
}
